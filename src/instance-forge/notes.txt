# TODO here operationinitializer
eligible_machines: List[Machine] = []
if is_eligible:
    # case we have multi center shop problem
    if (is_flowshop or is_jobshop or is_openshop) and prev_center is None:
        # TODO make sure eligible machines align with required sequence
        # make sure that when at least one machine per stage is eligible
        if is_flowshop:
            eligible_machines = machine_rand.sample(
                machines, k=machine_rand.randint(0, len(machines)))
        elif is_jobshop:
            eligible_machines = machine_rand.sample(
                machines, k=machine_rand.randint(0, len(machines)))
        else:
            eligible_machines = machine_rand.sample(
                machines, k=machine_rand.randint(0, len(machines)))
        
    elif (is_flowshop or is_jobshop or is_openshop) and prev_center is not None:
        # case if we have the same eligibale machines across centers
        if is_same_mj:
            if self.jobs[j].operations[op_idx].eligible_machines:
                raise ValueError("Eligibale Machines not found in operations!")
            eligible_machines = [
                machine for machine in center.machines
                if machine.id in (self.jobs[j].operations[op_idx].eligible_machines or [])
            ]
        else:  
            # TODO make sure eligible machines align with required sequence
            eligible_machines = machine_rand.sample(
                machines, k=machine_rand.randint(1, len(machines)))
    else: # case for single center P, Q and R
    eligible_machines = machine_rand.sample(
        machines, k=machine_rand.randint(1, len(machines)))
else:
    eligible_machines = machines







def prime_instance_params() -> Tuple[List[int], List[int]]:
    """
    returns: (num_jobs, num_machines) as Tuple

    numbers are selected based on primes
    7 is the 4th prime -> 7+4 = 11 -> 11th prime is 31
    choose the higher number of the first twin prime
    pair in the interval of 7 and 31 -> (11, 13) -> 13
    13 is the 6th prime ... (and so on)
    """
    return ([31, 67, 103, 181, 331], [7, 13, 19, 31, 43])
    